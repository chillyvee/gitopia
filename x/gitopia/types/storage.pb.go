// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitopia/storage.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StorageType int32

const (
	StorageTypeUnspecified StorageType = 0
	StorageTypeIpfs        StorageType = 1
	StorageTypeArweave     StorageType = 2
)

var StorageType_name = map[int32]string{
	0: "STORAGE_TYPE_UNSPECIFIED",
	1: "STORAGE_TYPE_IPFS",
	2: "STORAGE_TYPE_ARWEAVE",
}

var StorageType_value = map[string]int32{
	"STORAGE_TYPE_UNSPECIFIED": 0,
	"STORAGE_TYPE_IPFS":        1,
	"STORAGE_TYPE_ARWEAVE":     2,
}

func (x StorageType) String() string {
	return proto.EnumName(StorageType_name, int32(x))
}

func (StorageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7a72f12e0af84758, []int{0}
}

type StorageFileType int32

const (
	StorageFileTypeUnspecified StorageFileType = 0
	StorageFileTypePackfile    StorageFileType = 1
	StorageFileTypeRelease     StorageFileType = 2
	StorageFileTypeGitLfs      StorageFileType = 3
)

var StorageFileType_name = map[int32]string{
	0: "STORAGE_FILE_TYPE_UNSPECIFIED",
	1: "STORAGE_FILE_TYPE_PACKFILE",
	2: "STORAGE_FILE_TYPE_RELEASE",
	3: "STORAGE_FILE_TYPE_GIT_LFS",
}

var StorageFileType_value = map[string]int32{
	"STORAGE_FILE_TYPE_UNSPECIFIED": 0,
	"STORAGE_FILE_TYPE_PACKFILE":    1,
	"STORAGE_FILE_TYPE_RELEASE":     2,
	"STORAGE_FILE_TYPE_GIT_LFS":     3,
}

func (x StorageFileType) String() string {
	return proto.EnumName(StorageFileType_name, int32(x))
}

func (StorageFileType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7a72f12e0af84758, []int{1}
}

type Storage struct {
	Id              uint64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ParentId        uint64          `protobuf:"varint,2,opt,name=parentId,proto3" json:"parentId,omitempty"`
	StorageType     StorageType     `protobuf:"varint,3,opt,name=storageType,proto3,enum=gitopia.gitopia.gitopia.StorageType" json:"storageType,omitempty"`
	StorageFileType StorageFileType `protobuf:"varint,4,opt,name=storageFileType,proto3,enum=gitopia.gitopia.gitopia.StorageFileType" json:"storageFileType,omitempty"`
	Latest          *FileMeta       `protobuf:"bytes,5,opt,name=latest,proto3" json:"latest,omitempty"`
	Previous        *FileMeta       `protobuf:"bytes,6,opt,name=previous,proto3" json:"previous,omitempty"`
	CreatedAt       int64           `protobuf:"varint,7,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt       int64           `protobuf:"varint,8,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (m *Storage) Reset()         { *m = Storage{} }
func (m *Storage) String() string { return proto.CompactTextString(m) }
func (*Storage) ProtoMessage()    {}
func (*Storage) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a72f12e0af84758, []int{0}
}
func (m *Storage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Storage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Storage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Storage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Storage.Merge(m, src)
}
func (m *Storage) XXX_Size() int {
	return m.Size()
}
func (m *Storage) XXX_DiscardUnknown() {
	xxx_messageInfo_Storage.DiscardUnknown(m)
}

var xxx_messageInfo_Storage proto.InternalMessageInfo

func (m *Storage) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Storage) GetParentId() uint64 {
	if m != nil {
		return m.ParentId
	}
	return 0
}

func (m *Storage) GetStorageType() StorageType {
	if m != nil {
		return m.StorageType
	}
	return StorageTypeUnspecified
}

func (m *Storage) GetStorageFileType() StorageFileType {
	if m != nil {
		return m.StorageFileType
	}
	return StorageFileTypeUnspecified
}

func (m *Storage) GetLatest() *FileMeta {
	if m != nil {
		return m.Latest
	}
	return nil
}

func (m *Storage) GetPrevious() *FileMeta {
	if m != nil {
		return m.Previous
	}
	return nil
}

func (m *Storage) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Storage) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

type FileMeta struct {
	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *FileMeta) Reset()         { *m = FileMeta{} }
func (m *FileMeta) String() string { return proto.CompactTextString(m) }
func (*FileMeta) ProtoMessage()    {}
func (*FileMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_7a72f12e0af84758, []int{1}
}
func (m *FileMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileMeta.Merge(m, src)
}
func (m *FileMeta) XXX_Size() int {
	return m.Size()
}
func (m *FileMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_FileMeta.DiscardUnknown(m)
}

var xxx_messageInfo_FileMeta proto.InternalMessageInfo

func (m *FileMeta) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FileMeta) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterEnum("gitopia.gitopia.gitopia.StorageType", StorageType_name, StorageType_value)
	proto.RegisterEnum("gitopia.gitopia.gitopia.StorageFileType", StorageFileType_name, StorageFileType_value)
	proto.RegisterType((*Storage)(nil), "gitopia.gitopia.gitopia.Storage")
	proto.RegisterType((*FileMeta)(nil), "gitopia.gitopia.gitopia.FileMeta")
}

func init() { proto.RegisterFile("gitopia/storage.proto", fileDescriptor_7a72f12e0af84758) }

var fileDescriptor_7a72f12e0af84758 = []byte{
	// 543 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0xeb, 0xb6, 0x6c, 0xad, 0x2b, 0xad, 0xc5, 0xec, 0x4f, 0x66, 0x20, 0x0a, 0x13, 0x87,
	0xaa, 0x12, 0x29, 0x1a, 0x1c, 0x40, 0x88, 0x43, 0x18, 0x49, 0x15, 0x51, 0xa0, 0x72, 0x3a, 0x10,
	0x5c, 0x2a, 0xaf, 0x71, 0x8b, 0x45, 0xd7, 0x44, 0x89, 0x5b, 0xd8, 0x27, 0x00, 0x45, 0x1c, 0xf8,
	0x02, 0x39, 0x71, 0xe4, 0x8b, 0x70, 0xdc, 0x91, 0x23, 0x6a, 0xbf, 0x08, 0x4a, 0xda, 0x66, 0x59,
	0xb6, 0x09, 0x4e, 0xf1, 0xfb, 0xbe, 0xcf, 0xef, 0xb1, 0xf3, 0xbe, 0x36, 0xdc, 0x1a, 0x72, 0xe1,
	0xb8, 0x9c, 0x36, 0x7d, 0xe1, 0x78, 0x74, 0xc8, 0x54, 0xd7, 0x73, 0x84, 0x83, 0x76, 0x96, 0x69,
	0x35, 0xf3, 0xc5, 0x9b, 0x43, 0x67, 0xe8, 0xc4, 0x9a, 0x66, 0xb4, 0x5a, 0xc8, 0xf7, 0xbe, 0x14,
	0xe0, 0xba, 0xb5, 0x30, 0x40, 0x1b, 0x30, 0xcf, 0x6d, 0x09, 0x28, 0xa0, 0x5e, 0x24, 0x79, 0x6e,
	0x23, 0x0c, 0x4b, 0x2e, 0xf5, 0xd8, 0x58, 0x98, 0xb6, 0x94, 0x8f, 0xb3, 0x49, 0x8c, 0x0c, 0x58,
	0x59, 0xee, 0xdb, 0x3d, 0x71, 0x99, 0x54, 0x50, 0x40, 0x7d, 0x63, 0xff, 0xae, 0x7a, 0xc5, 0xe6,
	0xaa, 0x75, 0xa6, 0x25, 0x69, 0x10, 0x11, 0x58, 0x5d, 0x86, 0x06, 0x1f, 0x2d, 0xbc, 0x8a, 0xb1,
	0x57, 0xfd, 0x5f, 0x5e, 0x2b, 0x3d, 0xc9, 0x1a, 0xa0, 0xc7, 0x70, 0x6d, 0x44, 0x05, 0xf3, 0x85,
	0x74, 0x4d, 0x01, 0xf5, 0xca, 0xfe, 0x9d, 0x2b, 0xad, 0x22, 0xe4, 0x25, 0x13, 0x94, 0x2c, 0x01,
	0xf4, 0x14, 0x96, 0x5c, 0x8f, 0x4d, 0xb9, 0x33, 0xf1, 0xa5, 0xb5, 0xff, 0x85, 0x13, 0x04, 0xdd,
	0x82, 0xe5, 0xbe, 0xc7, 0xa8, 0x60, 0xb6, 0x26, 0xa4, 0x75, 0x05, 0xd4, 0x0b, 0xe4, 0x2c, 0x11,
	0x55, 0x27, 0xae, 0xbd, 0xac, 0x96, 0x16, 0xd5, 0x24, 0xb1, 0xa7, 0xc2, 0xd2, 0xca, 0x31, 0x35,
	0x89, 0x72, 0x3c, 0x09, 0x04, 0x8b, 0x63, 0x7a, 0xcc, 0xe2, 0x29, 0x94, 0x49, 0xbc, 0x6e, 0xfc,
	0x04, 0xb0, 0x92, 0x6a, 0x2b, 0x7a, 0x04, 0x25, 0xab, 0xfb, 0x9a, 0x68, 0x2d, 0xbd, 0xd7, 0x7d,
	0xd7, 0xd1, 0x7b, 0x87, 0xaf, 0xac, 0x8e, 0x7e, 0x60, 0x1a, 0xa6, 0xfe, 0xbc, 0x96, 0xc3, 0x38,
	0x08, 0x95, 0xed, 0x94, 0xfc, 0x70, 0xec, 0xbb, 0xac, 0xcf, 0x07, 0x9c, 0xd9, 0xa8, 0x01, 0xaf,
	0x9f, 0x23, 0xcd, 0x8e, 0x61, 0xd5, 0x00, 0xbe, 0x11, 0x84, 0x4a, 0x35, 0x85, 0x98, 0xee, 0xc0,
	0x47, 0xf7, 0xe1, 0xe6, 0x39, 0xad, 0x46, 0xde, 0xea, 0xda, 0x1b, 0xbd, 0x96, 0xc7, 0xdb, 0x41,
	0xa8, 0xa0, 0x94, 0x5c, 0xf3, 0x3e, 0x31, 0x3a, 0x65, 0xb8, 0xf8, 0xf5, 0x87, 0x9c, 0x6b, 0x7c,
	0xcb, 0xc3, 0x6a, 0x66, 0x70, 0x48, 0x83, 0xb7, 0x57, 0x5e, 0x86, 0xd9, 0xbe, 0xf4, 0xd8, 0x72,
	0x10, 0x2a, 0x38, 0xc3, 0xa5, 0x8f, 0xfe, 0x04, 0xe2, 0x8b, 0x16, 0x1d, 0xed, 0xe0, 0x45, 0x14,
	0xd5, 0x00, 0xbe, 0x19, 0x84, 0xca, 0x4e, 0x86, 0xef, 0xd0, 0xfe, 0xc7, 0x01, 0x1f, 0x45, 0xf7,
	0x64, 0xf7, 0x22, 0x4c, 0xf4, 0xb6, 0xae, 0x59, 0xd1, 0x0f, 0xa5, 0x5b, 0x96, 0x5c, 0x36, 0x36,
	0x62, 0xd4, 0x8f, 0x9a, 0x7d, 0x09, 0xda, 0x32, 0xbb, 0xbd, 0xb6, 0x61, 0xd5, 0x0a, 0x78, 0x37,
	0x08, 0x95, 0xad, 0x0c, 0xda, 0xe2, 0xa2, 0x3d, 0xf0, 0x17, 0xed, 0x78, 0xd6, 0xfa, 0x35, 0x93,
	0xc1, 0xe9, 0x4c, 0x06, 0x7f, 0x66, 0x32, 0xf8, 0x3e, 0x97, 0x73, 0xa7, 0x73, 0x39, 0xf7, 0x7b,
	0x2e, 0xe7, 0xde, 0xdf, 0x1b, 0x72, 0xf1, 0x61, 0x72, 0xa4, 0xf6, 0x9d, 0xe3, 0xe6, 0xea, 0x85,
	0xaf, 0xbe, 0xd3, 0x87, 0xcd, 0xcf, 0x49, 0x20, 0x4e, 0x5c, 0xe6, 0x1f, 0xad, 0xc5, 0xcf, 0xf8,
	0xc1, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4d, 0x6d, 0xd6, 0xff, 0x0e, 0x04, 0x00, 0x00,
}

func (m *Storage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Storage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Storage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdatedAt != 0 {
		i = encodeVarintStorage(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x40
	}
	if m.CreatedAt != 0 {
		i = encodeVarintStorage(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x38
	}
	if m.Previous != nil {
		{
			size, err := m.Previous.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStorage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Latest != nil {
		{
			size, err := m.Latest.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStorage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.StorageFileType != 0 {
		i = encodeVarintStorage(dAtA, i, uint64(m.StorageFileType))
		i--
		dAtA[i] = 0x20
	}
	if m.StorageType != 0 {
		i = encodeVarintStorage(dAtA, i, uint64(m.StorageType))
		i--
		dAtA[i] = 0x18
	}
	if m.ParentId != 0 {
		i = encodeVarintStorage(dAtA, i, uint64(m.ParentId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintStorage(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FileMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStorage(dAtA []byte, offset int, v uint64) int {
	offset -= sovStorage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Storage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovStorage(uint64(m.Id))
	}
	if m.ParentId != 0 {
		n += 1 + sovStorage(uint64(m.ParentId))
	}
	if m.StorageType != 0 {
		n += 1 + sovStorage(uint64(m.StorageType))
	}
	if m.StorageFileType != 0 {
		n += 1 + sovStorage(uint64(m.StorageFileType))
	}
	if m.Latest != nil {
		l = m.Latest.Size()
		n += 1 + l + sovStorage(uint64(l))
	}
	if m.Previous != nil {
		l = m.Previous.Size()
		n += 1 + l + sovStorage(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovStorage(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovStorage(uint64(m.UpdatedAt))
	}
	return n
}

func (m *FileMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	return n
}

func sovStorage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStorage(x uint64) (n int) {
	return sovStorage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Storage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Storage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Storage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			m.ParentId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ParentId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageType", wireType)
			}
			m.StorageType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageType |= StorageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StorageFileType", wireType)
			}
			m.StorageFileType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StorageFileType |= StorageFileType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Latest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Latest == nil {
				m.Latest = &FileMeta{}
			}
			if err := m.Latest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Previous", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Previous == nil {
				m.Previous = &FileMeta{}
			}
			if err := m.Previous.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStorage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStorage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStorage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStorage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStorage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStorage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStorage = fmt.Errorf("proto: unexpected end of group")
)
