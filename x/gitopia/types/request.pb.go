// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gitopia/request.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Request_Type int32

const (
	Request_UPDATEREPOSITORYCOLLABORATOR Request_Type = 0
	Request_UPDATEDAOMEMBER              Request_Type = 1
)

var Request_Type_name = map[int32]string{
	0: "UPDATEREPOSITORYCOLLABORATOR",
	1: "UPDATEDAOMEMBER",
}

var Request_Type_value = map[string]int32{
	"UPDATEREPOSITORYCOLLABORATOR": 0,
	"UPDATEDAOMEMBER":              1,
}

func (x Request_Type) String() string {
	return proto.EnumName(Request_Type_name, int32(x))
}

func (Request_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2efd4b997f9fba1b, []int{0, 0}
}

type Request_State int32

const (
	Request_AWAITED  Request_State = 0
	Request_ACCEPTED Request_State = 1
	Request_REJECTED Request_State = 2
)

var Request_State_name = map[int32]string{
	0: "AWAITED",
	1: "ACCEPTED",
	2: "REJECTED",
}

var Request_State_value = map[string]int32{
	"AWAITED":  0,
	"ACCEPTED": 1,
	"REJECTED": 2,
}

func (x Request_State) String() string {
	return proto.EnumName(Request_State_name, int32(x))
}

func (Request_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2efd4b997f9fba1b, []int{0, 1}
}

type Request struct {
	Id          uint64        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Source      string        `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Target      string        `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	RequestType Request_Type  `protobuf:"varint,4,opt,name=requestType,proto3,enum=gitopia.gitopia.gitopia.Request_Type" json:"requestType,omitempty"`
	State       Request_State `protobuf:"varint,5,opt,name=state,proto3,enum=gitopia.gitopia.gitopia.Request_State" json:"state,omitempty"`
	Message     string        `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	Expiry      int64         `protobuf:"varint,7,opt,name=expiry,proto3" json:"expiry,omitempty"`
	CreatedAt   int64         `protobuf:"varint,8,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_2efd4b997f9fba1b, []int{0}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return m.Size()
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Request) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Request) GetTarget() string {
	if m != nil {
		return m.Target
	}
	return ""
}

func (m *Request) GetRequestType() Request_Type {
	if m != nil {
		return m.RequestType
	}
	return Request_UPDATEREPOSITORYCOLLABORATOR
}

func (m *Request) GetState() Request_State {
	if m != nil {
		return m.State
	}
	return Request_AWAITED
}

func (m *Request) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Request) GetExpiry() int64 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

func (m *Request) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

type Requests struct {
	Sent     []uint64 `protobuf:"varint,1,rep,packed,name=sent,proto3" json:"sent,omitempty"`
	Received []uint64 `protobuf:"varint,2,rep,packed,name=received,proto3" json:"received,omitempty"`
}

func (m *Requests) Reset()         { *m = Requests{} }
func (m *Requests) String() string { return proto.CompactTextString(m) }
func (*Requests) ProtoMessage()    {}
func (*Requests) Descriptor() ([]byte, []int) {
	return fileDescriptor_2efd4b997f9fba1b, []int{1}
}
func (m *Requests) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Requests) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Requests.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Requests) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Requests.Merge(m, src)
}
func (m *Requests) XXX_Size() int {
	return m.Size()
}
func (m *Requests) XXX_DiscardUnknown() {
	xxx_messageInfo_Requests.DiscardUnknown(m)
}

var xxx_messageInfo_Requests proto.InternalMessageInfo

func (m *Requests) GetSent() []uint64 {
	if m != nil {
		return m.Sent
	}
	return nil
}

func (m *Requests) GetReceived() []uint64 {
	if m != nil {
		return m.Received
	}
	return nil
}

func init() {
	proto.RegisterEnum("gitopia.gitopia.gitopia.Request_Type", Request_Type_name, Request_Type_value)
	proto.RegisterEnum("gitopia.gitopia.gitopia.Request_State", Request_State_name, Request_State_value)
	proto.RegisterType((*Request)(nil), "gitopia.gitopia.gitopia.Request")
	proto.RegisterType((*Requests)(nil), "gitopia.gitopia.gitopia.Requests")
}

func init() { proto.RegisterFile("gitopia/request.proto", fileDescriptor_2efd4b997f9fba1b) }

var fileDescriptor_2efd4b997f9fba1b = []byte{
	// 409 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xcf, 0x8a, 0xd4, 0x40,
	0x10, 0xc6, 0xd3, 0x99, 0xcc, 0x9f, 0xad, 0x95, 0x75, 0x68, 0xff, 0x35, 0xcb, 0x12, 0xc2, 0x80,
	0x12, 0x3c, 0x64, 0x44, 0x6f, 0xa2, 0x87, 0x9e, 0x99, 0x46, 0x56, 0x76, 0xc9, 0xd0, 0x1b, 0x11,
	0xbd, 0x65, 0x93, 0x22, 0xe6, 0xb0, 0x26, 0xa6, 0x7b, 0x64, 0xe7, 0x2d, 0xf4, 0xad, 0x3c, 0xee,
	0xd1, 0xa3, 0xcc, 0xbc, 0x88, 0x74, 0x27, 0x33, 0x8a, 0x20, 0x7b, 0xaa, 0xfa, 0x7d, 0xf9, 0xaa,
	0xf2, 0x35, 0x14, 0x3c, 0x28, 0x4a, 0x5d, 0xd5, 0x65, 0x3a, 0x6d, 0xf0, 0xcb, 0x0a, 0x95, 0x8e,
	0xea, 0xa6, 0xd2, 0x15, 0x7d, 0xd4, 0xc9, 0xd1, 0x3f, 0xf5, 0xf8, 0x7e, 0x51, 0x15, 0x95, 0xf5,
	0x4c, 0x4d, 0xd7, 0xda, 0x27, 0xdf, 0x7b, 0x30, 0x94, 0xed, 0x02, 0x7a, 0x04, 0x6e, 0x99, 0x33,
	0x12, 0x90, 0xd0, 0x93, 0x6e, 0x99, 0xd3, 0x87, 0x30, 0x50, 0xd5, 0xaa, 0xc9, 0x90, 0xb9, 0x01,
	0x09, 0x0f, 0x64, 0x47, 0x46, 0xd7, 0x69, 0x53, 0xa0, 0x66, 0xbd, 0x56, 0x6f, 0x89, 0xbe, 0x81,
	0xc3, 0x2e, 0x4b, 0xb2, 0xae, 0x91, 0x79, 0x01, 0x09, 0x8f, 0x9e, 0x3f, 0x8e, 0xfe, 0x13, 0x28,
	0xea, 0x7e, 0x1b, 0x19, 0xb3, 0xfc, 0x7b, 0x92, 0xbe, 0x82, 0xbe, 0xd2, 0xa9, 0x46, 0xd6, 0xb7,
	0x2b, 0x9e, 0xdc, 0xba, 0xe2, 0xc2, 0xb8, 0x65, 0x3b, 0x44, 0x19, 0x0c, 0xaf, 0x50, 0xa9, 0xb4,
	0x40, 0x36, 0xb0, 0xf9, 0x76, 0x68, 0x82, 0xe3, 0x75, 0x5d, 0x36, 0x6b, 0x36, 0x0c, 0x48, 0xd8,
	0x93, 0x1d, 0xd1, 0x13, 0x38, 0xc8, 0x1a, 0x4c, 0x35, 0xe6, 0x5c, 0xb3, 0x91, 0xfd, 0xf4, 0x47,
	0x98, 0xbc, 0x06, 0xcf, 0xa6, 0x0a, 0xe0, 0xe4, 0xdd, 0x72, 0xc1, 0x13, 0x21, 0xc5, 0x32, 0xbe,
	0x38, 0x4d, 0x62, 0xf9, 0x61, 0x1e, 0x9f, 0x9d, 0xf1, 0x59, 0x2c, 0x79, 0x12, 0xcb, 0xb1, 0x43,
	0xef, 0xc1, 0xdd, 0xd6, 0xb1, 0xe0, 0xf1, 0xb9, 0x38, 0x9f, 0x09, 0x39, 0x26, 0x93, 0x67, 0xd0,
	0xb7, 0xf1, 0xe8, 0x21, 0x0c, 0xf9, 0x7b, 0x7e, 0x9a, 0x88, 0xc5, 0xd8, 0xa1, 0x77, 0x60, 0xc4,
	0xe7, 0x73, 0xb1, 0x34, 0x44, 0x0c, 0x49, 0xf1, 0x56, 0xcc, 0x0d, 0xb9, 0x93, 0x97, 0x30, 0xea,
	0x1e, 0xa6, 0x28, 0x05, 0x4f, 0xe1, 0x67, 0xcd, 0x48, 0xd0, 0x0b, 0x3d, 0x69, 0x7b, 0x7a, 0x0c,
	0xa3, 0x06, 0x33, 0x2c, 0xbf, 0x62, 0xce, 0x5c, 0xab, 0xef, 0x79, 0xb6, 0xf8, 0xb1, 0xf1, 0xc9,
	0xcd, 0xc6, 0x27, 0xbf, 0x36, 0x3e, 0xf9, 0xb6, 0xf5, 0x9d, 0x9b, 0xad, 0xef, 0xfc, 0xdc, 0xfa,
	0xce, 0xc7, 0xa7, 0x45, 0xa9, 0x3f, 0xad, 0x2e, 0xa3, 0xac, 0xba, 0x9a, 0xee, 0x4e, 0x67, 0x57,
	0xaf, 0xf7, 0x9d, 0x5e, 0xd7, 0xa8, 0x2e, 0x07, 0xf6, 0x38, 0x5e, 0xfc, 0x0e, 0x00, 0x00, 0xff,
	0xff, 0xee, 0x87, 0xd3, 0x66, 0x64, 0x02, 0x00, 0x00,
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != 0 {
		i = encodeVarintRequest(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x40
	}
	if m.Expiry != 0 {
		i = encodeVarintRequest(dAtA, i, uint64(m.Expiry))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x32
	}
	if m.State != 0 {
		i = encodeVarintRequest(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x28
	}
	if m.RequestType != 0 {
		i = encodeVarintRequest(dAtA, i, uint64(m.RequestType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Target) > 0 {
		i -= len(m.Target)
		copy(dAtA[i:], m.Target)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.Target)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintRequest(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintRequest(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Requests) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Requests) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Requests) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Received) > 0 {
		dAtA2 := make([]byte, len(m.Received)*10)
		var j1 int
		for _, num := range m.Received {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintRequest(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sent) > 0 {
		dAtA4 := make([]byte, len(m.Sent)*10)
		var j3 int
		for _, num := range m.Sent {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintRequest(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRequest(dAtA []byte, offset int, v uint64) int {
	offset -= sovRequest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovRequest(uint64(m.Id))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	l = len(m.Target)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	if m.RequestType != 0 {
		n += 1 + sovRequest(uint64(m.RequestType))
	}
	if m.State != 0 {
		n += 1 + sovRequest(uint64(m.State))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	if m.Expiry != 0 {
		n += 1 + sovRequest(uint64(m.Expiry))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovRequest(uint64(m.CreatedAt))
	}
	return n
}

func (m *Requests) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Sent) > 0 {
		l = 0
		for _, e := range m.Sent {
			l += sovRequest(uint64(e))
		}
		n += 1 + sovRequest(uint64(l)) + l
	}
	if len(m.Received) > 0 {
		l = 0
		for _, e := range m.Received {
			l += sovRequest(uint64(e))
		}
		n += 1 + sovRequest(uint64(l)) + l
	}
	return n
}

func sovRequest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRequest(x uint64) (n int) {
	return sovRequest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Target = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestType", wireType)
			}
			m.RequestType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestType |= Request_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= Request_State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			m.Expiry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiry |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Requests) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Requests: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Requests: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Sent = append(m.Sent, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRequest
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthRequest
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Sent) == 0 {
					m.Sent = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRequest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Sent = append(m.Sent, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Sent", wireType)
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Received = append(m.Received, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRequest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRequest
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthRequest
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Received) == 0 {
					m.Received = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRequest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Received = append(m.Received, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Received", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRequest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRequest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRequest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRequest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRequest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRequest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRequest = fmt.Errorf("proto: unexpected end of group")
)
